{
  "date": "2020-09-10T06:02:28.553Z",
  "title": "First Blog Post, or how I created this blog",
  "description": "First Blog Post",
  "body": "This blog section utilizes Netlify CMS. I followed the initial steps here <https://www.netlifycms.org/docs/nuxt/>. \n\nThe blog posts are all static JSON files stored in the repository. Netlify CMS allows for many different fields but these are the simple ones. \n\n* Text field - fairly self explanatory\n* Date field - features a date and time picker\n* Rich text field - Allows you to write content using markdown. I'm using <https://www.npmjs.com/package/@nuxtjs/markdownit> to display the entire body with markdown text and styling it accordingly. \n\nNetlify CMS defines each one of these as widgets and there are many more widgets available at <https://www.netlifycms.org/docs/widgets/>. \n\nThere are many other uses for this that I might use in the future but this is it for now. Due to the fact that this site is hosted on Netlify and the blog posts are simply JSON files in the repo, publishing a new post will kick off a deploy to get the new blog post online. \n\n\n\nThis entire site itself was built using [VuetifyJS](https://vuetifyjs.com/en/). VuetifyJS utilizes a very different framework that takes awhile to learn but is extremely powerful. Most of the layouts utilize a `v-container`, `v-row` , and `v-col`. These are standard layout blocks that follow standard flex principles requiring you to define some type of flex class yourself. There's also a bunch of other components utilized here that makes scaffolding a website extremely simple. The about page utilizes the `v-timeline` component, for instance and throughout the app I'm able to use built in classes defined for padding and spacing the page in general. There's too many components to talk about here so take a look if you're interested!\n\nNext up will be a blog post about the TFT game app that I'm creating with .NET Core and React. Look out for that next time!"
}